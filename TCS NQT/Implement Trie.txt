/*
   Your Trie object will be instantiated and called as such:
   Trie* obj = new Trie();
   obj->insert(word);
   bool check2 = obj->search(word);
   bool check3 = obj->startsWith(prefix);
*/
class TrieNode {
   public :
       char data ; 
       TrieNode* children[26] ; 
       bool isTerminal ;

        TrieNode(char ch) 
  {
        data = ch ;

      for ( int i = 0 ; i < 26 ; i++ )
      {
       children[i] = NULL ; 
     }
     isTerminal = false ; 
}
} ;

class Trie {
           TrieNode* root ; 
public:

   /** Initialize your data structure here. */
   Trie() {
        root = new TrieNode('\0') ;
   }
       void insertUtil (TrieNode* root , string word) {
   //  BASE CASE 
    if (word.length() == 0) {
      root -> isTerminal = true ; 
      return ; 
    }
    
    //  ASSUMPTION , WORD WILL BE IN CAPS 
     int index = word[0] - 'a' ;
     TrieNode* child  ;

    //  PRESENT 
    if ( root -> children[index] != NULL) {
      child = root -> children[index] ;
    }
    else {
      //  ABSENT 
      child = new TrieNode(word[0]) ;
      root -> children[index] = child ;        
    }

    //  RECURSIVE CALL  
    insertUtil (child , word.substr(1)) ;    
  }

   /** Inserts a word into the trie. */
   void insert(string word) {
          insertUtil(root , word) ;
   }
   
bool searchutil (TrieNode* root , string word) {
 //  BASE CASE 
  if (word.length() == 0) {
    return root -> isTerminal ; 
  }

  int index  = word[0] - 'a' ;
  TrieNode* child ;  

  //  PRESENT
  if ( root -> children[index]  != NULL ) {
   child = root -> children[index] ;  
  } 
   else {
     //  ABSENT 
     return false ; 
   }
 
  //   RECURSION 
  return searchutil (child , word.substr(1) )  ;
}
   /** Returns if the word is in the trie. */
   bool search(string word) {
          return searchutil (root , word)  ;
   }
    
    bool prefixutil (TrieNode* root , string word) {
 //  BASE CASE 
  if (word.length() == 0) {
    return true ; 
  }

  int index  = word[0] - 'a' ;
  TrieNode* child ;  

  //  PRESENT
  if ( root -> children[index]  != NULL ) {
   child = root -> children[index] ;  
  } 
   else {
     //  ABSENT 
     return false ; 
   }
 
  //   RECURSION 
  return prefixutil (child , word.substr(1) )  ;
}
    
   /** Returns if there is any word in the trie that starts with the given prefix. */
   bool startsWith(string prefix) {
     return prefixutil (root , prefix) ;
   }
};